version: "3.8"

services:
  postgres:
    container_name: ${COMPOSE_PROJECT_NAME:-cosmo}-postgres
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - cosmo-network

  redis:
    container_name: ${COMPOSE_PROJECT_NAME:-cosmo}-redis
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server ${REDIS_PASSWORD:+--requirepass $REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - cosmo-network

  api:
    container_name: ${COMPOSE_PROJECT_NAME:-cosmo}-api
    build:
      context: .
      dockerfile: ./docker/api.dev.Dockerfile
      args:
        - NODE_ENV=${NODE_ENV:-development}
    ports:
      - "4000:4000"
    environment:
      # Database
      - DATABASE_URL=${DATABASE_URL}

      # Redis
      - REDIS_URL=${REDIS_URL}

      # JWT & Auth
      - JWT_SECRET=${JWT_SECRET}
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${PORT}
      - FRONTEND_URL=${FRONTEND_URL}

      # AI
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - DEEPSEEK_MODEL=${DEEPSEEK_MODEL}
      - DEFAULT_AI_PROVIDER=${DEFAULT_AI_PROVIDER}
      - OPENAI_API_KEY=${OPENAI_API_KEY}

      # Rate Limiting
      - THROTTLE_TTL=${THROTTLE_TTL}
      - THROTTLE_LIMIT=${THROTTLE_LIMIT}
    volumes:
      - .:/app
      - /app/node_modules
      - /app/apps/api/node_modules
      - /app/apps/api/dist
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cosmo-network

  web:
    container_name: ${COMPOSE_PROJECT_NAME:-cosmo}-web
    build:
      context: .
      dockerfile: ./docker/web.dev.Dockerfile
      args:
        - NODE_ENV=${NODE_ENV:-development}
    ports:
      - "3000:3000"
    environment:
      # Next.js
      - NODE_ENV=${NODE_ENV:-development}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}

      # QuickBooks
      - QUICKBOOKS_CLIENT_ID=${QUICKBOOKS_CLIENT_ID}
      - QUICKBOOKS_CLIENT_SECRET=${QUICKBOOKS_CLIENT_SECRET}
      - QUICKBOOKS_REDIRECT_URI=${QUICKBOOKS_REDIRECT_URI}
      - QUICKBOOKS_ENVIRONMENT=${QUICKBOOKS_ENVIRONMENT}

      - DOCKER_ENV=http://api:4000
    volumes:
      - .:/app
      - /app/node_modules
      - /app/apps/web/node_modules
      - /app/apps/web/.next
    depends_on:
      - api
    networks:
      - cosmo-network

volumes:
  postgres-data:
  redis-data:

networks:
  cosmo-network:
    driver: bridge
