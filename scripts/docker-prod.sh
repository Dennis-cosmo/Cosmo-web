#!/bin/bash

# Script para ejecutar en producci√≥n con Docker

echo "üê≥ Iniciando Cosmo en modo PRODUCCI√ìN con Docker..."

# Cargar variables de producci√≥n
export $(cat .env.docker.prod | grep -v '^#' | xargs)

# Verificar que las variables cr√≠ticas est√©n presentes
if [ -z "$QUICKBOOKS_CLIENT_ID" ]; then
    echo "‚ùå QUICKBOOKS_CLIENT_ID no est√° configurado en .env.docker.prod"
    exit 1
fi

if [ -z "$DEEPSEEK_API_KEY" ]; then
    echo "‚ùå DEEPSEEK_API_KEY no est√° configurado en .env.docker.prod"
    exit 1
fi

if [ -z "$POSTGRES_PASSWORD" ] || [ "$POSTGRES_PASSWORD" = "tu_password_postgres_super_seguro_y_largo_aqui" ]; then
    echo "‚ùå POSTGRES_PASSWORD debe ser configurado con un valor seguro"
    exit 1
fi

echo "‚úÖ Variables de producci√≥n cargadas"
echo "üèóÔ∏è  Ambiente: $NODE_ENV"
echo "üîë QuickBooks: $QUICKBOOKS_ENVIRONMENT"
echo "üåê Domain: $DOMAIN"

# Construir e iniciar los contenedores en producci√≥n
docker-compose --env-file .env.docker.prod -f docker-compose.yml -f docker-compose.production.yml up --build -d

echo "üöÄ Cosmo ejecut√°ndose en producci√≥n:"
echo "   Frontend: https://$DOMAIN"
echo "   API: https://$DOMAIN/api"
echo "   QuickBooks: https://$DOMAIN/integrations/quickbooks"

# Mostrar logs
docker-compose --env-file .env.docker.prod -f docker-compose.yml -f docker-compose.production.yml logs -f 